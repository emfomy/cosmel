; 2016/01/01
;
; This is the setting file of CKIP Word Segmentation System
;
; Lines starting with semi-comma are considered as comment
;
; Each section defines an object in the system. The section name like
; [ConsoleLogger] is the class name of the object being created.
; Following several lines is the parameter for each object. The format is
; "key"="value" where the key string is case sensitive. Refer to the
; method InitData() of each class for more detail about how these settings
; are used.
;
; Each object must have at least the setting "Name" to identify the different
; objects of the same class during the segmentation process.
;
; You can supply a logger for every type of object to output message while
; the object processes something and want to show some message. The parameter
; "Logger" is optional for all types of objects.
;
; Boolean valus can be the following format (case insensitive)
; true: 1 true yes
; false: 0 false no
;

[ConsoleLogger]
Name=ConsoleLogger

;[CFileLogger]
;Name=FileLogger
;FileName=Logger.txt

[CTextLexicon]
Name=TextLex
; Filename of lexicon data
FileName=data/tmp/for_product.lex

[CLexicon]
Name=Lex
; Filename of lexicon data
FileName=Data2/Lexicon.Dat

[CALexicon]
Name=CALex
; Filename of covering ambiguity lexicon data
FileName=Data2/CALexicon.Dat

[CDMMergedParser]
Name=DMMergedParser
; Generate DM words that have the maximum word length in the sentence? yes : no
GenerateMaxLengthWordOnly=no
; Lexicon object
LexiconName=Lex

[CDMSplittedParser]
Name=DMSplittedParser
; Generate DM words that have the maximum word length in the sentence? yes : no
GenerateMaxLengthWordOnly=no
; Lexicon object
LexiconName=Lex

[CHTRDRule3]
Name=RD3
; Lexicon object
LexiconName=Lex

[CHTRDRule6]
Name=RD6
; Lexicon object
LexiconName=Lex

[CHTRDRule7]
Name=RD7
; Lexicon object
LexiconName=Lex

[CHTForeignWord]
Name=FW
; Lexicon object
LexiconName=Lex

[CHTBoundWord]
Name=BW
; Lexicon object
LexiconName=Lex

[CMaxMatch]
Name=MaxMatch
; Specify the window size of matching
WindowSize=3

[CHTCategoryPredictor]
Name=CatPred
; 4 filenames of required data
PrefixCategoryFileName=Data2/CatPredictData/PrefixCategoryFreq
PrefixFileName=Data2/CatPredictData/PrefixFreq
SuffixCategoryFileName=Data2/CatPredictData/SuffixCategoryFreq
SuffixFileName=Data2/CatPredictData/SuffixFreq

[CStatProb]
Name=CAProb1
; Filename of probability data
FileName=Data2/CAStat-w(0)c(0)-w(-1).dat

[CStatProb]
Name=CAProb2
; Filename of probability data
FileName=Data2/CAStat-w(0)c(0)-w(1).dat

[CStatProb]
Name=CAProb3
; Filename of probability data
FileName=Data2/CAStat-w(0)c(0)-w(-2).dat

[CStatProb]
Name=CAProb4
; Filename of probability data
FileName=Data2/CAStat-w(0)c(0)-w(2).dat

[CoveringAmbiguity]
Name=CA
; Lexicon object
LexiconName=Lex
; Covering ambiguity object
CoveringAmbiguityLexiconName=CALex
; Insert splitted word into the candidate word list only for other object's disambiguation? true
; or do the disambiguation by itself? false
InsertSplittedWsWordsOnly=false
; Probability objects
StatisticProbability1=CAProb1
StatisticProbability2=CAProb2
StatisticProbability3=CAProb3
StatisticProbability4=CAProb4

[CStatProb]
Name=Prob1
; Filename of probability data
FileName=Data2/CKIPWStatistic-w(-1)-w(0).dat

[CStatProb]
Name=Prob2
; Filename of probability data
FileName=Data2/CKIPWStatistic-c(-1)-c(0).dat

[CStatProb]
Name=Prob3
; Filename of probability data
FileName=Data2/CKIPWStatistic-c(0)-w(0).dat

[CSimpleProbModel]
Name=ProbModel
; Logger to output message
;Logger=FileLogger
; This markov model class need 3 probability objects, specify them
; in w(-1)w(0), c(-1)c(0), and c(0)w(0) in turn.
StatisticProbability1=Prob1
StatisticProbability2=Prob2
StatisticProbability3=Prob3
; Lexicon object
LexiconName=Lex
TextLexiconName=TextLex
AdjustProb3=true
; Covering ambiguity lexicon object; optional
CoveringAmbiguityLexiconName=CALex
; Category predicator object
CategoryPredictor=CatPred
; Keep best category only? true
; or keep all category but let the best one in the top 1 position? false
KeepBestCategory=true
SimplifiedCategory=false

[CDetectMonosyllabicMorpheme]
Name=DMM
; Apply default heuristic detect rule? yes : no
ApplyDefaultHeuristicDetectRule=yes
; Specify the path of required data
InitDataPath=Data2/uwea/qrulepool/

[ChineseName]
Name=CN
; Lexicon object
LexiconName=Lex
TextLexiconName=TextLex
; Specify the path of required data
InitDataPath=Data2/uwea/data/

[CForeignName]
Name=FN
; Lexicon object
LexiconName=Lex
TextLexiconName=TextLex
; Specify the path of required data
InitDataPath=Data2/uwea/data/

[CompoundWord]
Name=CW
; Lexicon object
LexiconName=Lex
; Specify the path of required data
InitDataPath=Data2/uwea/data/

[CStatisticWord]
Name=SW
; Lexicon object
LexiconName=Lex
TextLexiconName=TextLex
; Category predicator object
CategoryPredictor=CatPred
; Specify the path of required data
InitDataPath=Data2/uwea/data/
; There are 12 rules in this class, and each is defined as a bit in a
; size_t variable: 0000 0000 0000 0000 0000 0000 0000 0000
; To apply rule 2 and 5, specify 0000 0000 0000 0000 0000 0000 0001 0010,
; i.e., 18
ApplyRule=639
; ApplyRule=4095

[CAffixCombiner]
Name=AC
; Lexicon object
LexiconName=Lex
TextLexiconName=TextLex
; Category predicator object
CategoryPredictor=CatPred

[CSimilarStructureCombiner]
Name=SSC
; Automatically combine similar structure into a word of minimal length
AutoCombineWordLen=2
; Heuristic combine similar structure into a word of minimal length
HeuristicCombinedWordMaxLen=3
; Lexicon object
LexiconName=Lex
; Category predicator
CategoryPredictor=CatPred

[COnlineLexicon]
Name=OnlineLexForUWGen

[CUnknownWord]
Name=UW
; A list of unknown word generator objects that inherit from
; class CUnknownWordGenerator
UnknownWordGeneratorList=DMM CN FN CW SW SSC
; Online lexcion object to store unknown words
OnlineLexicon=OnlineLexForUWGen
;Logger=ConsoleLogger
; 2009, unknown word
FileName=unknown.txt

[CLexWordGenerator]
Name=LWGen
; Lexicon object
LexiconName=Lex

[CLexWordGenerator]
Name=myLWGen
; Lexicon object
LexiconName=TextLex

[CLexWordGenerator]
Name=LWGen1
; Lexicon object
LexiconName=Lex
; generate the words of a maximum word length; optional
MaxWordLen=1

[CLexWordGenerator]
Name=UWGen
; Lexicon object
LexiconName=OnlineLexForUWGen

[CSimpleProbModelResult]
Name=ProbModelResult
; Probability model to be generated the segmentation result
ProbabilityModelName=ProbModel
;true:與輸入相同; false是依段落切分輸出。
NewStyleFormat=true
;是否輸出Category
ShowCategory=true

;[CFeatureAssigner]
;Name=FA
; Filename of setting
;IniFileName=crf_feature.ini

;[ConditionalRandomField]
;Name=CRF
; Filename of training model
;ModelFileName=CRF-Model.dat
; Lexicon object
LexiconName=Lex
; Category predicator
CategoryPredictor=CatPred
; Generate words into existing candidate word list? true : false
KeepExistingWord=true
; Feature assigner object
FeatureAssigner=FA
; Fitering bad word automatically? true : false
; Do not filter bad word when only the CRF object is used in the segmentation
; process because some words might be discarded and the result won't be correct
FilterBadWord=false

[CDetectDMForPostProcess]
Name=DDMFPP

[CRemoveWordToBePostProcessed]
Name=RWTBPP

[CWordSegmentor]
; The name of final CWordSegmentor must be 'MainWS'; DO NOT modify it!!
Name=MainWS
;Logger=ConsoleLogger
; Specify the number of lines to be considered as an article for local statistic
ArticleMaxLineNum=300
; Specify the maximum number of chars to be considered as an sentence for local statistic : default is 80
SentenceMaxWordNum=80
;是否每次都載入自訂詞典, false:否, true:是
ReloadMyDic=false

;Result object
Result=ProbModelResult

;Handler list
; HandlerList=LWGen DMMergedParser RD3 RD6 RD7 FW BW MaxMatch ProbModel UW DDMFPP LWGen UWGen RWTBPP LWGen DMSplittedParser BW MaxMatch ProbModel CA

;Handler list for parser
;HandlerList=LWGen DMMergedParser RD3 RD6 RD7 FW BW MaxMatch ProbModel UW LWGen UWGen MaxMatch ProbModel CA

;不做Unknown Word Detection
;HandlerList=LWGen myLWGen DMMergedParser RD3 RD6 RD7 FW BW MaxMatch ProbModel
;HandlerList=LWGen DMMergedParser RD3 RD6 RD7 FW BW MaxMatch ProbModel

;加入自訂辭典
HandlerList=LWGen myLWGen DMMergedParser RD3 RD6 RD7 FW BW MaxMatch ProbModel UW DDMFPP LWGen UWGen RWTBPP LWGen myLWGen DMSplittedParser BW MaxMatch ProbModel CA
